scalar Date

type Video {
  _id: ID!
  title: String!
  description: String!
  uploadedBy: User!
  filePath: String!
  duration: String!
  privacy: Int
  thumbnail: String!
  createdAt: String!
  category: Category
  comments: [Comment]
  likes: [Like]
  isLike: Boolean
  views: Int!
}
type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  roles: [String!]!
  profilePic: String
  token: String!
  refresh_token: String!
}

type Category {
  _id: ID!
  name: String!
  createdAt: String!
}

type Comment {
  _id: ID!
  body: String!
  user: User!
  createdAt: String!
  replies: [Comment]
}

type Like {
  user: User!
  createdAt: String!
}

type Channel {
  name: String!
  description: String!
  coverImage: String!
  avatarImage: String!
  member: [User]
  createdAt: Date!
  createdBy: User!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  roles: [String!]!
  profilePic: String!
}

input VideoInput {
  title: String!
  description: String!
  filePath: String!
  duration: String!
  thumbnail: String!
  uploadedBy: String!
  privacy: Int!
}

input LoginPayload {
  email: String!
  password: String!
}

input ChannelInput {
  name: String!
  description: String!
  coverImage: String
  avatarImage: String
}

type Query {
  videos: [Video!]
  video(id: String, userId: String): Video!
  videosRelated(id: String): [Video!]
}

type Mutation {
  createVideo(video: VideoInput): Video
  updateVideoView(id: ID): Video
  createUser(user: UserInput): User
  login(payload: LoginPayload): User
  refreshToken(token: String): String
  logout(token: String): String
  updateVideo(id: ID!, video: VideoInput!): Video
  createComment(videoId: ID!, comment: String!): Comment
  replyComment(videoId: ID!, commentId: ID!, reply: String!): Comment
  likeVideo(videoId: ID!): Video
  createChannel(channelInput: ChannelInput): Channel
}

schema {
  query: Query
  mutation: Mutation
}
